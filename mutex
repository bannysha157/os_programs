#include<stdio.h>
#include<pthread.h>
#include<unistd.h>
char ch=65;//global variable
pthread_mutex_t  d;
void* thread1(void*p) //function defination and declaretion.return type is void
{
while((ch>=65)&&(ch<=90)) //print A to Z logic
{
pthread_mutex_lock(&d); //critical section of thread1  locking
printf("%c",ch++);
pthread_mutex_unlock(&d);//unlocking the resource for thread1
}
printf("\n");
}
void* thread2(void*p)
{
ch=65;
while(ch<=90) //print a to z
{
pthread_mutex_unlock(&d); //critical section of thread1 likir locking
printf("%c",ch+32);
ch++;
pthread_mutex_lock(&d);//unlocking the resource for thread1
}
}
int main()
{
pthread_mutex_init(&d,0); //mutex initialization in that we pass 2 arguments (address,attributes)
pthread_t a,b; //pthread_t is an macro it is used to create variables
pthread_create(&a,0,thread1,0);//(address,attributes,functioncall,string)
pthread_create(&b,0,thread2,0);
pthread_join(a,0);//to run the terminate process we use threadjoin
pthread_join(b,0);
return 0;

}
